= Building an Operating System for the Web =

I embedded a JavaScript engine in a C++ application and used it to make some webapps.  I made a wiki with it.  That is what you are looking at.  It's not especially good, but the interesting part is that you, as a visitor to this web site, have the power to rewrite the wiki webapp itself into something better.

{{{
#!html
<div style="width: 300px; float: left; padding: 1em">
	<h1>Security +</h1>
	<p>Webapps here are built out of smaller tasks.</p>
	<p>Each task runs in its own process just like tabs in the <a href="http://www.chromium.org/developers/design-documents/sandbox">Google Chrome</a> web browser.</p>
	<p>Each task declares and is granted access to only what resources it needs just like <a href="http://www.veracode.com/resources/android-ios-security">apps on a mobile device</a>.</p>
	<p>Sensible limits on access to resources will prevent any one task from negatively affecting others.</p>
</div>
<div style="width: 300px; float: left; padding: 1em">
	<h1>Sharing</h1>
	<p>This is open source.  Browse or branch it <a href="https://github.com/unprompted/sandboxos">from here</a>.</p>
	<p>All tasks are yours to improve.  Clone any task on this server or your own, make it better, and then share what you made, all from a browser.</p>
	<p>Let's get many instances of this all talking to each other just like popular social networks don't.</p>
</div>
<div style="width: 300px; float: left; padding: 1em">
	<h1>= Power?</h1>
	<p>This is another experimental approach at executing on the <a href="http://en.wikipedia.org/wiki/Unix_philosophy">UNIX philosophy</a>.</p>
	<p>This can become an extension of your web browser, but since it's a separate application under your control, it can have extra access to system resources while still benefitting your browser(s) of choice.</p>
	<p>Make the web browser the next terminal.</p>
</div>
<div style="width: 300px; float: left; padding: 1em">
	<h1>// The Architecture</h1>
	<table border="0">
		<tr>
			<td colspan="5">Web Browsers (Chrome, Firefox, ...)</td>
		</tr>
		<tr>
			<td style="background-color: #ccf">httpd</td>
			<td style="background-color: #ccf">auth</td>
			<td style="background-color: #ccf">wiki</td>
			<td style="background-color: #ccf">chat</td>
			<td style="background-color: #ccf">...<div><small>(more JavaScript tasks)</small></div></td>
		</tr>
		<tr>
			<td colspan="5" style="background-color: #ccf">system.js<div><small>(core task)</small></div></td>
		</tr>
		<tr>
			<td colspan="5" style="background-color: #ccf">sandboxos<div><small>(working title, small C++ program that mediates tasks running JavaScript code with the layers below)</small></div></td>
		</tr>
		<tr>
			<td colspan="5"><a href="https://code.google.com/p/v8/">V8</a><div><small>(Google's open source JavaScript engine)</small></div></td>
		</tr>
		<tr>
			<td colspan="5"><a href="https://github.com/libuv/libuv">libuv</a><div><small>(cross platform asynchronous I/O library)</small></div></td>
		</tr>
		<tr>
			<td>Linux</td>
			<td>Windows</td>
			<td>OS X</td>
			<td>Android</td>
			<td>iOS<div><small>(jailbroken only?)</small></div></td>
		</tr>
		<tr>
			<td colspan="3">PC</td>
			<td colspan="2">Mobile Device</td>
		</tr>
	</table>
</div>
<div style="clear: both"></div>
}}}

= How to Get Started =

{{{
#!html
<ol>
<li>Visit the <a href="/tasks">/tasks</a> page.</li>
<li>Pick a task (hint: consider <b>helloworld</b>, <b>wiki</b>, or <b>chat</b>).  Click edit.  You will probably have to log in at this point.</li>
<li>Clone it.</li>
<li>Make modifications.</li>
<li>Visit the task's frontend in a web browser and refresh it to see your changes.</li>
<li>Ask questions.  Either stick them here on the wiki somewhere, or email me at <a href="mailto:sandbox@unprompted.com">sandbox@unprompted.com</a>.</li>
</ol>
}}}

It should be difficult to do anything too disruptive, and there are backups if you do.  '''Don't worry about breaking things.'''

It's easy to make things fail silently.  I will be working on improving that.  '''Use the log task.'''

There are probably ways to do bad things if you try hard.  '''Please don't be mean.'''

= TODO =
In no particular order:
 * Set limits for everything.  n anonymous users can each make m tasks with p MB of storage and can make q HTTP request per second.
 * Make some sort of TODO / bug tracker to replace this task list.
 * Establish some conventions for non-webapp tasks.  Maybe make a shell that lets you run code from any task that exposes it.
 * Establish some conventions for HTML fragments.  Include a persistent HTML header in every page or something like that.
 * Make an app store.  Not too important until we have multiple installs but pretty important.
 * Lots of the API exposed from C++ isn't async but should be.
 * Pick a name for this thing.
 * ~~Set up an [https://www.unprompted.com/projects/build/sandboxos automated build].~~
 * Feedback is really bad or missing.  If you break a task, it might just stop responding to web requests.  I have the benefit of being able to see console output, but that's really noisy and bad.  There might be times where it is necessary to restart the whole process.  Ultimately there should be a way to see feedback when you've broken something, and things should be hardened so that you can't take down the whole system without abusing administrative rights.
 * Security here is not good at the moment.  I'm essentially trusting you to please don't do bad things.  I've taken some steps to harden this thing, but it has a long way to go.
 * ~~Inter-task messaging is really awkward to type.  And the way you need to respond to httpd requests is even weirder.  I will work on this.  It should be possible to get most things close to being first-class function calls, except asynchronous.~~
 * ~~Make this wiki actually use some sort of wiki syntax.  HTML is too 90s.~~
 * ~~The C++ program needs to use separate processes for each task in order to prevent OOM situations in one task from taking down the whole process.~~
 * ~~The C++ program needs to build and run on Windows.~~  It needs to do so as transparently in the background as possible while still being trivial to acquire and start (Windows service / system tray icon).
 * ~~Need to implement a real security model.  I was thinking once this has an authentication task, everything can use that to enforce that nobody but administrators changed the core tasks and that anonymous and untrusted users don't do anything too malicious.~~
 * ~~Be able to marshal functions across task boundaries so that the httpd task can return a request object that has the same API as node.js.  I think this will greatly simplify the client code for webapps.~~
 * ~~Need to implement something like proper javascript requires() and package dependencies for code sharing.~~